{"version":3,"sources":["components/Tile.jsx","components/Board.jsx","components/DragTile.jsx","components/Toolbar.jsx","components/App.jsx","index.js"],"names":["DropTarget","drop","props","monitor","component","rowIndex","boxIndex","connect","connectDropTarget","dropTarget","hovered","isOver","tile","getItem","boxSide","value","handleBoxClick","tiles","clickEnabled","backgroundColor","react_default","a","createElement","onClick","className","style","width","concat","heigth","src","content","alt","Board","_ref","boardWidth","boardHeight","boxMatrix","boardRef","nrOfBoxesWide","Math","floor","nrOfBoxesHigh","ref","height","gridTemplateColumns","gridTemplateRows","map","row","box","components_Tile","key","DragTile","_this$props","this","isDragging","connectDragSource","opacity","border","padding","marginBottom","cursor","React","Component","DragSource","beginDrag","endDrag","didDrop","handleTileDrop","getDropResult","dragSource","connectDragPreview","dragPreview","Toolbar","setBoxSide","background","setBackground","toggleClickEnabled","_useState","useState","_useState2","Object","slicedToArray","isExpanded","toggleIsExpanded","name","id","onChange","e","target","tileIndex","components_DragTile","tileContent","tileTarget","react_rangeslider_lib_default","labels","50","100","150","min","max","orientation","boardMargin","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","updatedBoxSide","setState","updateBoxMatrix","updatedBackground","updateBoardSize","_this$boardRef$curren","current","clientHeight","clientWidth","length","createBoxMatrix","_this$state","newBoxMatrix","i","push","Array","fill","_this$state2","newMatrix","toConsumableArray","boxesWideDiff","forEach","boxesHighDiff","updatedValue","createRef","window","addEventListener","_this2","_this$state3","backgroundImage","components_Toolbar","components_Board","DragDropContext","HTML5Backend","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.16eccb3f.chunk.js","sourcesContent":["import React from \"react\";\nimport { DropTarget } from \"react-dnd\";\n\nconst tileTarget = {\n  drop(props, monitor, component) {\n    return {\n      rowIndex: props.rowIndex,\n      boxIndex: props.boxIndex\n    };\n  }\n};\n\nfunction collect(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    hovered: monitor.isOver(),\n    tile: monitor.getItem()\n  };\n}\n\nconst Tile = props => {\n  const {\n    rowIndex,\n    boxIndex,\n    boxSide,\n    value,\n    handleBoxClick,\n    tiles,\n    clickEnabled\n  } = props;\n  const { connectDropTarget, hovered } = props;\n  const backgroundColor = hovered ? \"lightgreen\" : \"\";\n\n  return connectDropTarget(\n    <div\n      onClick={clickEnabled && (() => handleBoxClick(rowIndex, boxIndex))}\n      className=\"grid__box\"\n      style={{\n        width: `${boxSide}px`,\n        heigth: `${boxSide}px`,\n        backgroundColor: `${backgroundColor}`\n      }}\n    >\n      {value > 0 && (\n        <img\n          className=\"grid__box--image\"\n          src={`./tiles/${tiles[value].content}.png`}\n          alt=\"Tile\"\n        />\n      )}\n    </div>\n  );\n};\n\nexport default DropTarget(\"tile\", tileTarget, collect)(Tile);\n","import React from \"react\";\nimport Tile from \"./Tile\";\n\nconst Board = ({\n  boxSide,\n  boardWidth,\n  boardHeight,\n  boxMatrix,\n  tiles,\n  boardRef,\n  handleBoxClick,\n  clickEnabled\n}) => {\n  const nrOfBoxesWide = Math.floor(boardWidth / boxSide);\n  const nrOfBoxesHigh = Math.floor(boardHeight / boxSide);\n\n  return (\n    <div className=\"gridWrapper\" ref={boardRef}>\n      <div\n        className=\"grid\"\n        style={{\n          width: nrOfBoxesWide * boxSide,\n          height: nrOfBoxesHigh * boxSide,\n          gridTemplateColumns: `repeat(auto-fill, ${boxSide}px)`,\n          gridTemplateRows: `repeat(auto-fill, ${boxSide}px)`\n        }}\n      >\n        {boxMatrix.map((row, rowIndex) => {\n          if (rowIndex < nrOfBoxesHigh) {\n            return row.map((box, boxIndex) => {\n              if (boxIndex < nrOfBoxesWide) {\n                return (\n                  <Tile\n                    rowIndex={rowIndex}\n                    boxIndex={boxIndex}\n                    boxSide={boxSide}\n                    value={box}\n                    tiles={tiles}\n                    key={boxIndex}\n                    handleBoxClick={(rowIndex, boxIndex) =>\n                      handleBoxClick(rowIndex, boxIndex)\n                    }\n                    clickEnabled={clickEnabled}\n                  />\n                );\n              } else {\n                return null;\n              }\n            });\n          } else {\n            return null;\n          }\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\nimport { DragSource } from \"react-dnd\";\n\nconst tileSource = {\n  beginDrag(props) {\n    return props.tile;\n  },\n  endDrag(props, monitor, component) {\n    if (!monitor.didDrop()) {\n      return;\n    }\n    return props.handleTileDrop(props.tile.content, monitor.getDropResult());\n  }\n};\n\nfunction collect(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    connectDragPreview: connect.dragPreview(),\n    isDragging: monitor.isDragging()\n  };\n}\n\nclass DragTile extends React.Component {\n  render() {\n    const { isDragging, connectDragSource, tile } = this.props;\n    const opacity = isDragging ? 0.5 : 1;\n    return connectDragSource(\n      <div\n        className=\"grid-box\"\n        style={{\n          border: `2px solid #444444`,\n          padding: `5px`,\n          width: `75px`,\n          heigth: `75px`,\n          marginBottom: `10px`,\n          cursor: \"pointer\"\n        }}\n      >\n        <img\n          style={{ opacity: `${opacity}` }}\n          className=\"grid__box--image\"\n          src={`./tiles/${tile.content}.png`}\n          alt=\"Tile\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default DragSource(\"tile\", tileSource, collect)(DragTile);\n","import React, { useState } from \"react\";\nimport Slider from \"react-rangeslider\";\nimport DragTile from \"./DragTile\";\nimport \"react-rangeslider/lib/index.css\";\n\nconst Toolbar = ({\n  boxSide,\n  setBoxSide,\n  background,\n  setBackground,\n  tiles,\n  handleTileDrop,\n  clickEnabled,\n  toggleClickEnabled\n}) => {\n  const [isExpanded, toggleIsExpanded] = useState(false);\n  return (\n    <div className=\"toolbar__wrapper\">\n      <div\n        className=\"toolbar__toggle\"\n        onClick={() => toggleIsExpanded(!isExpanded)}\n      >\n        <i className=\"fab fa-fort-awesome\" />\n      </div>\n      <div className={`toolbar ${isExpanded ? \"\" : \"toolbar--collapsed\"}`}>\n        <select\n          style={{ marginBottom: \"20px\" }}\n          name=\"backgroundPicker\"\n          id=\"backgroundPicker\"\n          value={background}\n          onChange={e => setBackground(e.target.value)}\n        >\n          <option value=\"grass\">Meadow</option>\n          <option value=\"water\">Water</option>\n          <option value=\"forest\">Forest</option>\n          <option value=\"desert\">Desert</option>\n        </select>\n        <div className=\"toolbar__tiles\">\n          <div className=\"tile\">\n            {tiles.map((tile, tileIndex) => {\n              if (tileIndex !== 0) {\n                return (\n                  <DragTile\n                    tile={tile}\n                    handleTileDrop={(tileContent, tileTarget) =>\n                      handleTileDrop(tileContent, tileTarget)\n                    }\n                  />\n                );\n              }\n            })}\n          </div>\n        </div>\n        <div className=\"toolbar__slider--wrapper\">\n          <Slider\n            labels={{ 50: \"S\", 100: \"M\", 150: \"L\" }}\n            className=\"toolbar__slider\"\n            min={50}\n            max={150}\n            orientation=\"vertical\"\n            value={boxSide}\n            onChange={value => setBoxSide(value)}\n          />\n        </div>\n        <button className=\"toolbar__button\" onClick={toggleClickEnabled}>\n          {clickEnabled ? \"Disable click\" : \"Enable click\"}\n        </button>\n        {/* <button className=\"toolbar__button\">Save/Load</button> */}\n      </div>\n    </div>\n  );\n};\n\nexport default Toolbar;\n","import React from \"react\";\nimport { DragDropContext } from \"react-dnd\";\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport Board from \"./Board\";\nimport Toolbar from \"./Toolbar\";\n\nconst boardMargin = 20;\nconst tiles = [\n  { content: \"\" },\n  { content: \"rock\" },\n  { content: \"water\" },\n  { content: \"tree\" }\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.boardRef = React.createRef();\n  }\n\n  state = {\n    boxSide: 100,\n    boardHeight: 0,\n    boardWidth: 0,\n    boxMatrix: [],\n    background: \"grass\",\n    clickEnabled: false\n  };\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateBoardSize);\n    this.updateBoardSize();\n  }\n\n  setBoxSide = updatedBoxSide => {\n    this.setState(\n      {\n        boxSide: updatedBoxSide\n      },\n      () => this.updateBoxMatrix()\n    );\n  };\n\n  setBackground = updatedBackground => {\n    this.setState({\n      background: updatedBackground\n    });\n  };\n\n  updateBoardSize = () => {\n    const { clientHeight, clientWidth } = this.boardRef.current;\n    this.setState(\n      {\n        boardWidth: clientWidth - boardMargin,\n        boardHeight: clientHeight - boardMargin\n      },\n      () => {\n        if (this.state.boxMatrix.length === 0) {\n          this.createBoxMatrix();\n        } else {\n          this.updateBoxMatrix();\n        }\n      }\n    );\n  };\n\n  createBoxMatrix = () => {\n    const { boardWidth, boardHeight, boxSide } = this.state;\n    const nrOfBoxesWide = Math.floor(boardWidth / boxSide);\n    const nrOfBoxesHigh = Math.floor(boardHeight / boxSide);\n\n    let newBoxMatrix = [];\n    for (let i = 0; i < nrOfBoxesHigh; i++) {\n      newBoxMatrix.push(new Array(nrOfBoxesWide).fill(0));\n    }\n    this.setState({ boxMatrix: newBoxMatrix });\n  };\n\n  updateBoxMatrix = () => {\n    const { boardWidth, boardHeight, boxMatrix, boxSide } = this.state;\n    const nrOfBoxesWide = Math.floor(boardWidth / boxSide);\n    const nrOfBoxesHigh = Math.floor(boardHeight / boxSide);\n    const newMatrix = [...boxMatrix];\n\n    // Push another box to each row if board is too wide\n    if (nrOfBoxesWide > newMatrix[0].length) {\n      // calcs diff after resize, pushing one tile at the time is to slow for a fast resize\n      const boxesWideDiff = nrOfBoxesWide - newMatrix[0].length;\n      for (let i = 0; i < boxesWideDiff; i++) {\n        newMatrix.forEach(row => {\n          row.push(0);\n        });\n      }\n    }\n    // Push row onto Matrix if board is too tall\n    if (nrOfBoxesHigh > newMatrix.length) {\n      const boxesHighDiff = nrOfBoxesHigh - newMatrix.length;\n      for (let i = 0; i < boxesHighDiff; i++) {\n        newMatrix.push(new Array(newMatrix[0].length).fill(0));\n      }\n    }\n    this.setState({ boxMatrix: newMatrix });\n  };\n\n  handleBoxClick = (rowIndex, boxIndex) => {\n    const newMatrix = [...this.state.boxMatrix];\n    newMatrix[rowIndex][boxIndex] = (newMatrix[rowIndex][boxIndex] + 1) % 4;\n    this.setState({ boxMatrix: newMatrix });\n  };\n\n  handleTileDrop = (tileContent, tileTarget) => {\n    let newMatrix = [...this.state.boxMatrix];\n    let updatedValue;\n    switch (tileContent) {\n      case \"rock\": {\n        updatedValue = 1;\n        break;\n      }\n      case \"water\": {\n        updatedValue = 2;\n        break;\n      }\n      case \"tree\": {\n        updatedValue = 3;\n        break;\n      }\n      default: {\n        updatedValue = 0;\n      }\n    }\n    newMatrix[tileTarget.rowIndex][tileTarget.boxIndex] = updatedValue;\n    this.setState({ boxMatrix: newMatrix });\n  };\n\n  toggleClickEnabled = () => {\n    this.setState({ clickEnabled: !this.state.clickEnabled });\n  };\n\n  render() {\n    const {\n      boxSide,\n      boardWidth,\n      boardHeight,\n      boxMatrix,\n      background,\n      clickEnabled\n    } = this.state;\n    return (\n      <div\n        className=\"mainWrapper\"\n        style={{\n          backgroundImage: `url(./bg/${background}.jpeg)`\n        }}\n      >\n        <Toolbar\n          boxSide={this.state.boxSide}\n          setBoxSide={updatedBoxSide => this.setBoxSide(updatedBoxSide)}\n          background={background}\n          setBackground={updatedBackground =>\n            this.setBackground(updatedBackground)\n          }\n          tiles={tiles}\n          handleTileDrop={(tileContent, tileTarget) =>\n            this.handleTileDrop(tileContent, tileTarget)\n          }\n          clickEnabled={clickEnabled}\n          toggleClickEnabled={this.toggleClickEnabled}\n        />\n        <Board\n          boardRef={this.boardRef}\n          boxSide={boxSide}\n          boardWidth={boardWidth}\n          boardHeight={boardHeight}\n          boxMatrix={boxMatrix}\n          tiles={tiles}\n          handleBoxClick={(rowIndex, boxIndex) =>\n            this.handleBoxClick(rowIndex, boxIndex)\n          }\n          clickEnabled={clickEnabled}\n        />\n      </div>\n    );\n  }\n}\n\n// export default App;\nexport default DragDropContext(HTML5Backend)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./index.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}