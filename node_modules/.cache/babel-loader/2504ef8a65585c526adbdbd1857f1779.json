{"ast":null,"code":"import _classCallCheck from \"/Users/adam/Documents/GitHub/RpgGrid/code/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adam/Documents/GitHub/RpgGrid/code/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/adam/Documents/GitHub/RpgGrid/code/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/adam/Documents/GitHub/RpgGrid/code/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/adam/Documents/GitHub/RpgGrid/code/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/adam/Documents/GitHub/RpgGrid/code/src/components/app.js\";\nimport React from \"react\";\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      vpHeight: 0,\n      vpWidth: 0\n    };\n\n    _this.updateWindowSize = function () {\n      _this.setState({\n        vpWidth: window.innerWidth - 2,\n        vpHeight: window.innerHeight - 4\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener(\"resize\", this.updateWindowSize);\n      this.updateWindowSize();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // TODO\n      // Calculate leftover height and split the margin between top and bottom\n      // Deal with console errors\n      // Add a little safety margin for height\n      // Make Boxside constant be incharge of Box Size with inline class\n      // Make slider for box size so adjustable on different resolutions\n      // Make settings for backrounds\n      // Make boxes clickable??? for rocks players water or whatever.\n      var _this$state = this.state,\n          vpWidth = _this$state.vpWidth,\n          vpHeight = _this$state.vpHeight;\n      var boxSide = 100;\n      var nrOfBoxesWide = Math.floor(vpWidth / boxSide);\n      var nrOfBoxesHigh = Math.floor(vpHeight / boxSide);\n      var nrOfCells = Math.floor(vpWidth / boxSide) * Math.floor(vpHeight / boxSide);\n      var boxList = new Array(nrOfCells || 0).fill(\"\");\n      console.log(\"windowHeight: \" + vpHeight);\n      return React.createElement(\"div\", {\n        className: \"mainWrapper\",\n        style: {\n          width: vpWidth,\n          height: vpHeight\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"grid\",\n        style: {\n          width: nrOfBoxesWide * boxSide,\n          height: nrOfBoxesHigh * boxSide\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, boxList.map(function (box) {\n        return React.createElement(\"div\", {\n          className: \"grid__box\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/adam/Documents/GitHub/RpgGrid/code/src/components/app.js"],"names":["React","App","state","vpHeight","vpWidth","updateWindowSize","setState","window","innerWidth","innerHeight","addEventListener","boxSide","nrOfBoxesWide","Math","floor","nrOfBoxesHigh","nrOfCells","boxList","Array","fill","console","log","width","height","map","box","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;IAEMC,G;;;;;;;;;;;;;;;;;UAENC,K,GAAQ;AACNC,MAAAA,QAAQ,EAAE,CADJ;AAENC,MAAAA,OAAO,EAAE;AAFH,K;;UAURC,gB,GAAmB,YAAM;AACvB,YAAKC,QAAL,CAAc;AACZF,QAAAA,OAAO,EAAEG,MAAM,CAACC,UAAP,GAAoB,CADjB;AAEZL,QAAAA,QAAQ,EAAEI,MAAM,CAACE,WAAP,GAAqB;AAFnB,OAAd;AAID,K;;;;;;;wCAVmB;AAClBF,MAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkC,KAAKL,gBAAvC;AACA,WAAKA,gBAAL;AACD;;;6BASU;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARW,wBAWuB,KAAKH,KAX5B;AAAA,UAWCE,OAXD,eAWCA,OAXD;AAAA,UAWUD,QAXV,eAWUA,QAXV;AAYP,UAAMQ,OAAO,GAAG,GAAhB;AACA,UAAMC,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWV,OAAO,GAAGO,OAArB,CAAtB;AACA,UAAMI,aAAa,GAAGF,IAAI,CAACC,KAAL,CAAWX,QAAQ,GAAGQ,OAAtB,CAAtB;AACA,UAAMK,SAAS,GAAGH,IAAI,CAACC,KAAL,CAAWV,OAAO,GAAGO,OAArB,IAAgCE,IAAI,CAACC,KAAL,CAAWX,QAAQ,GAAGQ,OAAtB,CAAlD;AACA,UAAMM,OAAO,GAAG,IAAIC,KAAJ,CAAUF,SAAS,IAAI,CAAvB,EAA0BG,IAA1B,CAA+B,EAA/B,CAAhB;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBlB,QAA/B;AAGA,aACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAA6B,QAAA,KAAK,EAAE;AAAEmB,UAAAA,KAAK,EAAElB,OAAT;AAAkBmB,UAAAA,MAAM,EAAEpB;AAA1B,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAsB,QAAA,KAAK,EAAE;AAAEmB,UAAAA,KAAK,EAAEV,aAAa,GAAGD,OAAzB;AAAkCY,UAAAA,MAAM,EAAER,aAAa,GAAGJ;AAA1D,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGM,OAAO,CAACO,GAAR,CAAY,UAAAC,GAAG,EAAI;AAClB,eAAO;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,OAFA,CADH,CADF,CADF;AASD;;;;EAjDezB,KAAK,CAAC0B,S;;AAoDxB,eAAezB,GAAf","sourcesContent":["import React from \"react\";\n\nclass App extends React.Component {\n\nstate = {\n  vpHeight: 0,\n  vpWidth: 0\n}\n\ncomponentDidMount() {\n  window.addEventListener(\"resize\", this.updateWindowSize)\n  this.updateWindowSize()\n}\n\nupdateWindowSize = () => {\n  this.setState({\n    vpWidth: window.innerWidth - 2,\n    vpHeight: window.innerHeight - 4\n  })\n}\n\n  render() {\n// TODO\n// Calculate leftover height and split the margin between top and bottom\n// Deal with console errors\n// Add a little safety margin for height\n// Make Boxside constant be incharge of Box Size with inline class\n// Make slider for box size so adjustable on different resolutions\n// Make settings for backrounds\n// Make boxes clickable??? for rocks players water or whatever.\n\n\n    const { vpWidth, vpHeight } = this.state\n    const boxSide = 100\n    const nrOfBoxesWide = Math.floor(vpWidth / boxSide)\n    const nrOfBoxesHigh = Math.floor(vpHeight / boxSide)\n    const nrOfCells = Math.floor(vpWidth / boxSide) * Math.floor(vpHeight / boxSide)\n    const boxList = new Array(nrOfCells || 0).fill(\"\")\n\n    console.log(\"windowHeight: \" + vpHeight)\n\n\n    return (\n      <div className=\"mainWrapper\" style={{ width: vpWidth, height: vpHeight }}>\n        <div className=\"grid\" style={{ width: nrOfBoxesWide * boxSide, height: nrOfBoxesHigh * boxSide }}>\n          {boxList.map(box => {\n            return <div className=\"grid__box\"></div>\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}