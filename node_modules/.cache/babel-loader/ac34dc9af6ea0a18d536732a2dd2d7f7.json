{"ast":null,"code":"import _classCallCheck from \"/Users/adam/Documents/GitHub/RpgGrid/code/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adam/Documents/GitHub/RpgGrid/code/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/adam/Documents/GitHub/RpgGrid/code/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/adam/Documents/GitHub/RpgGrid/code/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/adam/Documents/GitHub/RpgGrid/code/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/adam/Documents/GitHub/RpgGrid/code/src/components/app.js\";\nimport React from \"react\";\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      vpHeight: 0,\n      vpWidth: 0\n    };\n\n    _this.updateWindowSize = function () {\n      _this.setState({\n        vpWidth: window.innerWidth - 10,\n        vpHeight: window.innerHeight - 10\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener(\"resize\", this.updateWindowSize);\n      this.updateWindowSize();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // TODO\n      // Make box size user adjustable by setting grid numbers inline\n      // Make slider for box size so adjustable on different resolutions\n      // Make settings for backrounds\n      // Deal with console errors'\n      // Make bg-images proper size\n      // Make grid color user adjustable\n      // Make boxes clickable??? for rocks players water or whatever.\n      // Make grid tiles that can be drag and dropable\n      var _this$state = this.state,\n          vpWidth = _this$state.vpWidth,\n          vpHeight = _this$state.vpHeight;\n      var boxSide = 100;\n      var nrOfBoxesWide = Math.floor(vpWidth / boxSide);\n      var nrOfBoxesHigh = Math.floor(vpHeight / boxSide);\n      var nrOfCells = Math.floor(vpWidth / boxSide) * Math.floor(vpHeight / boxSide);\n      var boxList = new Array(nrOfCells || 0).fill(\"\");\n      var marginVertical = vpHeight - nrOfBoxesHigh * boxSide;\n      console.log(\"window.innerWidth: \", window.innerWidth);\n      console.log(\"window.innerHeight: \", window.innerHeight);\n      return React.createElement(\"div\", {\n        className: \"mainWrapper\",\n        style: {\n          width: vpWidth + 10,\n          height: vpHeight + 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"grid\",\n        style: {\n          width: nrOfBoxesWide * boxSide + 1,\n          height: nrOfBoxesHigh * boxSide,\n          marginTop: marginVertical / 2\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, boxList.map(function (box) {\n        return React.createElement(\"div\", {\n          className: \"grid__box\",\n          style: {\n            width: boxSide,\n            heigth: boxSide\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/adam/Documents/GitHub/RpgGrid/code/src/components/app.js"],"names":["React","App","state","vpHeight","vpWidth","updateWindowSize","setState","window","innerWidth","innerHeight","addEventListener","boxSide","nrOfBoxesWide","Math","floor","nrOfBoxesHigh","nrOfCells","boxList","Array","fill","marginVertical","console","log","width","height","marginTop","map","box","heigth","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;IAEMC,G;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,QAAQ,EAAE,CADJ;AAENC,MAAAA,OAAO,EAAE;AAFH,K;;UAURC,gB,GAAmB,YAAM;AACvB,YAAKC,QAAL,CAAc;AACZF,QAAAA,OAAO,EAAEG,MAAM,CAACC,UAAP,GAAoB,EADjB;AAEZL,QAAAA,QAAQ,EAAEI,MAAM,CAACE,WAAP,GAAqB;AAFnB,OAAd;AAID,K;;;;;;;wCAVmB;AAClBF,MAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkC,KAAKL,gBAAvC;AACA,WAAKA,gBAAL;AACD;;;6BASQ;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATO,wBAWuB,KAAKH,KAX5B;AAAA,UAWCE,OAXD,eAWCA,OAXD;AAAA,UAWUD,QAXV,eAWUA,QAXV;AAYP,UAAMQ,OAAO,GAAG,GAAhB;AACA,UAAMC,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWV,OAAO,GAAGO,OAArB,CAAtB;AACA,UAAMI,aAAa,GAAGF,IAAI,CAACC,KAAL,CAAWX,QAAQ,GAAGQ,OAAtB,CAAtB;AACA,UAAMK,SAAS,GACbH,IAAI,CAACC,KAAL,CAAWV,OAAO,GAAGO,OAArB,IAAgCE,IAAI,CAACC,KAAL,CAAWX,QAAQ,GAAGQ,OAAtB,CADlC;AAEA,UAAMM,OAAO,GAAG,IAAIC,KAAJ,CAAUF,SAAS,IAAI,CAAvB,EAA0BG,IAA1B,CAA+B,EAA/B,CAAhB;AACA,UAAMC,cAAc,GAAGjB,QAAQ,GAAGY,aAAa,GAAGJ,OAAlD;AAEAU,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCf,MAAM,CAACC,UAA1C;AACAa,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCf,MAAM,CAACE,WAA3C;AAEA,aACE;AACE,QAAA,SAAS,EAAC,aADZ;AAEE,QAAA,KAAK,EAAE;AAAEc,UAAAA,KAAK,EAAEnB,OAAO,GAAG,EAAnB;AAAuBoB,UAAAA,MAAM,EAAErB,QAAQ,GAAG;AAA1C,SAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIE;AACE,QAAA,SAAS,EAAC,MADZ;AAEE,QAAA,KAAK,EAAE;AACLoB,UAAAA,KAAK,EAAEX,aAAa,GAAGD,OAAhB,GAA0B,CAD5B;AAELa,UAAAA,MAAM,EAAET,aAAa,GAAGJ,OAFnB;AAGLc,UAAAA,SAAS,EAAEL,cAAc,GAAG;AAHvB,SAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQGH,OAAO,CAACS,GAAR,CAAY,UAAAC,GAAG,EAAI;AAClB,eACE;AACE,UAAA,SAAS,EAAC,WADZ;AAEE,UAAA,KAAK,EAAE;AAAEJ,YAAAA,KAAK,EAAEZ,OAAT;AAAkBiB,YAAAA,MAAM,EAAEjB;AAA1B,WAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,OAPA,CARH,CAJF,CADF;AAwBD;;;;EAjEeX,KAAK,CAAC6B,S;;AAoExB,eAAe5B,GAAf","sourcesContent":["import React from \"react\";\n\nclass App extends React.Component {\n  state = {\n    vpHeight: 0,\n    vpWidth: 0\n  };\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateWindowSize);\n    this.updateWindowSize();\n  }\n\n  updateWindowSize = () => {\n    this.setState({\n      vpWidth: window.innerWidth - 10,\n      vpHeight: window.innerHeight - 10\n    });\n  };\n\n  render() {\n    // TODO\n    // Make box size user adjustable by setting grid numbers inline\n    // Make slider for box size so adjustable on different resolutions\n    // Make settings for backrounds\n    // Deal with console errors'\n    // Make bg-images proper size\n    // Make grid color user adjustable\n    // Make boxes clickable??? for rocks players water or whatever.\n    // Make grid tiles that can be drag and dropable\n\n    const { vpWidth, vpHeight } = this.state;\n    const boxSide = 100;\n    const nrOfBoxesWide = Math.floor(vpWidth / boxSide);\n    const nrOfBoxesHigh = Math.floor(vpHeight / boxSide);\n    const nrOfCells =\n      Math.floor(vpWidth / boxSide) * Math.floor(vpHeight / boxSide);\n    const boxList = new Array(nrOfCells || 0).fill(\"\");\n    const marginVertical = vpHeight - nrOfBoxesHigh * boxSide;\n\n    console.log(\"window.innerWidth: \", window.innerWidth);\n    console.log(\"window.innerHeight: \", window.innerHeight);\n\n    return (\n      <div\n        className=\"mainWrapper\"\n        style={{ width: vpWidth + 10, height: vpHeight + 10 }}\n      >\n        <div\n          className=\"grid\"\n          style={{\n            width: nrOfBoxesWide * boxSide + 1,\n            height: nrOfBoxesHigh * boxSide,\n            marginTop: marginVertical / 2\n          }}\n        >\n          {boxList.map(box => {\n            return (\n              <div\n                className=\"grid__box\"\n                style={{ width: boxSide, heigth: boxSide }}\n              />\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}